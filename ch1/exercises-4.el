;;; package --- exercises-4.el
;;; Commentary:

;;; Code:

;; Exercise 1.14
;; The stack depth is 16 (i.e. n + 5), which implies that
;; the storage required has order of growth = Theta(n).
;;
;; Drawing the call graph, we can see that when
;; amount = n = 11, a complete process having 55
;; steps is generated.
;; Let m = the number of coin types
;; Let n = the amount
;; Let N = the number of operations performed
;; when (cc n m) is evaluated.
;;
;; Then, we have:
;; N(n,5) = 1 + N(n,4) + N(n-50,5)
;; N(n,4) = 1 + N(n,3) + N(n-25,4)
;; N(n,3) = 1 + N(n,2) + N(n-10,3)
;; N(n,2) = 1 + N(n,1) + N(n-5,2)
;; N(n,1) = 1 + N(n,0) + N(n-1,1)
;; N(n,1) = 1 + 1 + N(n-1,1)
;;
;; N(n-1,1) = 1 + N(n-1,0) + N(n-2,1)
;; N(n-1,0) = 0
;;
;; N(n-2,1) = 1 + N(n-2,0) + N(n-3,1)
;; ...
;; N(n-n,1) = 1
;; ...
;; N(n-(n-1),1) = 1 + 1 + 1 = 3
;; N(n-(n-2),1) = 1 + 1 + N(n-(n-1),1) = 5
;; N(n-(n-3),1) = 1 + 1 + N(n-(n-2),1) = 7
;; ...
;; N(n,1) = 1 + 1 + N(n-1,1) = 2n + 1
;; N(n,2) = 1 + N(n,1) + N(n-5,2)
;;        = 1 + (2n + 1) + (1 + N(n-5,1) + N(n-10,2))
;;        = 1 + (2n + 1) + (1 + (1 + N(n-5,0) + N(n-6,1))
;;                       + (1 + N(n-10,1) + N(n-15,2))
;; ...
;;
;; This process will repeat until n <= 0, or in this
;; case, n/5 times, since each expansion of the second
;; term (e.g. (1 + N(n-5,1) + N(n-10,2))) will reduce
;; the argument by 5.
;; Each expansion produces an N(n,1) term, which will
;; evaluate to 2n + 1.  Note that while the subtraction
;; will reduce the value of the argument, and thus
;; the number of operations, the process is still
;; classified as linear.  So each expansion produces
;; some multiple of n operations, and this happens n/5
;; times.  So the total number of operations produced
;; by N(n,2) = (n^2)/5.
;;
;; For N(n,3), we know that N(n,2) is (n^2)/5 and
;; N(n-10,3) = 1 + N(n-10,2) + N(n-20,3).  Now that the
;; subtraction is by 10, we can assume n/10 steps will
;; be generated, and each one will produce an N(n,2) term,
;; meaning ((n^2)/5)(n/10) = (n^3)/50 operations will
;; be required.
;;
;; Extending this pattern, we can see that ultimately the
;; order of growth for N(n,5) will be Theta(n^5).

;; Exercise 1.15
;; a.) (sine 12.15)
;;     = (p (sine 4.05))
;;     = (p (p (sine 1.35)))
;;     = (p (p (p (sine 0.45))))
;;     = (p (p (p (p (sine 0.15)))))
;;     = (p (p (p (p (p (sine 0.05))))))
;;
;;     So, p is applied 5 times when (sine 12.15) is evaluated.
;;
;; b.) Both p and cube require a constant number of operations,
;;     as well as storage.  The only procedure then, that grows
;;     with the argument a, is p.  Both the space, and number
;;     of steps in this case will be equivalent, since the
;;     stack depth grows with p, and a call to p itself consists
;;     of one step.
;;
;;     Observe that the process generated by calling (sine a),
;;     Where a is some real number > 0.1, results in some
;;     natural number n calls to procedure p.
;;     The order of growth, then, will be the number of times
;;     a must be divided by 3.0 until it is no longer > 0.1.
;;     For example, for a = 12.15, a/3.0/3.0/3.0/3.0/3.0 = 0.05
;;     resulting in 5 calls to procedure p.  In general, we
;;     must find n such that a/(3^n) <= 0.1
;;
;;     a/(3^n) <= 0.1
;;     1/(3^n) <= (0.1)/a
;;     a/0.1 <= 3^n
;;     log(a/0.1) <= log(3^n)
;;     log(a/0.1) <= n * log(3)
;;     log(a/0.1)/log(3) <= n
;;     n >= log(3,a/0.1)
;;
;;     Now, since n describes the number of steps _required_ to
;;     process (sine a), it must be true that n < log(3,a/0.1) + 1.
;;     Therefore, n = ceil(log(3,a/0.1), and (sine a) has
;;     Theta(log(a)) order of growth.


(provide 'exercises-4)
;;; exercises-4.el ends here
